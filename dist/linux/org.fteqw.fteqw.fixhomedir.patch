diff --git a/engine/common/fs.c b/engine/common/fs.c
index 68b59d1b9..412d01bb7 100644
--- a/engine/common/fs.c
+++ b/engine/common/fs.c
@@ -466,7 +466,7 @@ static searchpath_t *gameonly_gamedir;
 
 char	com_gamepath[MAX_OSPATH];	//c:\games\quake
 char	com_homepath[MAX_OSPATH];	//c:\users\foo\my docs\fte\quake
-qboolean	com_homepathenabled;
+qboolean	com_homepathenabled = true;
 static qboolean	com_homepathusable;	//com_homepath is safe, even if not enabled.
 
 //char	com_configdir[MAX_OSPATH];	//homedir/fte/configs
@@ -2527,20 +2527,21 @@ static const char *FS_GetCleanPath(const char *pattern, qboolean silent, char *o
 		if (*s == ':')
 		{
 			if (s == pattern+1 && (s[1] == '/' || s[1] == '\\'))
-				Con_ThrottlePrintf(&throttletimer, 0, "Error: absolute path in filename %s\n", pattern);
-			else
+				Con_ThrottlePrintf(&throttletimer, 0, "Warning: absolute path in filename %s\n", pattern);
+			else {
 				Con_ThrottlePrintf(&throttletimer, 0, "Error: alternative data stream in filename %s\n", pattern);
-			return NULL;
+				return NULL;
+			}
 		}
 		else if (*s == '\\' || *s == '/' || !*s)
 		{	//end of segment
 			if (o == seg)
 			{
-				if (o == outbuf)
-				{
-					Con_ThrottlePrintf(&throttletimer, 0, "Error: absolute path in filename %s\n", pattern);
-					return NULL;
-				}
+				// if (o == outbuf)
+				// {
+				// 	Con_ThrottlePrintf(&throttletimer, 0, "Error: absolute path in filename %s\n", pattern);
+				// 	return NULL;
+				// }
 				if (!*s)
 				{
 					*o++ = '\0';
@@ -2666,7 +2667,7 @@ static qboolean FS_NativePath(const char *fname, enum fs_relative relativeto, ch
 
 	if (relativeto == FS_SYSTEM)
 	{
-		//system is already the native path. we can just pass it through. perhaps we should clean it up first however, although that's just making sure all \ are /	
+		//system is already the native path. we can just pass it through. perhaps we should clean it up first however, although that's just making sure all \ are /
 		if (fordisplay)
 		{
 			if (com_homepathenabled && !strncmp(fname, com_homepath, strlen(com_homepath)))	//'FS_HOME'
@@ -2857,7 +2858,7 @@ vfsfile_t *FS_OpenWithFriends(const char *fname, char *displayname, size_t displ
 			lastwritable = search;
 		if (search->handle->FindFile(search->handle, &loc, fname, NULL))
 			break;
-		
+
 		va_start(ap, numfriends);
 		for (i = 0; i < numfriends; i++)
 		{
@@ -2987,7 +2988,7 @@ vfsfile_t *QDECL FS_OpenVFS(const char *filename, const char *mode, enum fs_rela
 			}
 			else
 			{
-				if (!try_snprintf(fullname, sizeof(fullname), "%s%s/%s", com_homepath, gamedirfile, filename))
+				if (!try_snprintf(fullname, sizeof(fullname), "%s/%s", com_homepath, filename))
 					return NULL;
 				if (*mode == 'w')
 					COM_CreatePath(fullname);
@@ -3286,7 +3287,7 @@ qbyte *COM_LoadFile (const char *path, unsigned int locateflags, int usehunk, si
 	qbyte *buf;
 	qofs_t len;
 	flocation_t loc;
-	
+
 	locateflags &= ~FSLF_DEEPONFAILURE;	//disable any flags that can't be supported here
 
 	if (!FS_FLocateFile(path, locateflags, &loc) || !loc.search)
@@ -4083,7 +4084,7 @@ static void FS_AddDataFiles(searchpath_t **oldpaths, const char *purepath, const
 		char *names = buffer;
 		search->handle->ReadFile(search->handle, &loc, buffer);
 		buffer[loc.len] = 0;
-		
+
 		while (names && *names)
 		{
 			names = COM_ParseOut(names, filename, sizeof(filename));
@@ -4487,7 +4488,7 @@ char *FS_GetManifestArgs(void)
 	char *homearg = com_homepathenabled?"-usehome ":"-nohome ";
 	if (fs_manifest->filename)
 		return va("%s-manifest %s -basedir %s", homearg, fs_manifest->filename, com_gamepath);
-	
+
 	return va("%s-game %s -basedir %s", homearg, pubgamedirfile, com_gamepath);
 }
 #ifdef SUBSERVERS
@@ -4824,7 +4825,7 @@ vfsfile_t *CL_OpenFileInPackage(searchpathfuncs_t *search, char *name)
 			if (search)
 				found = search->FindFile(search, &loc, name, NULL);
 			else
-				found = FS_FLocateFile(name, FSLF_IFFOUND, &loc); 
+				found = FS_FLocateFile(name, FSLF_IFFOUND, &loc);
 			if (found)
 			{
 				f = (search?search:loc.search->handle)->OpenVFS(search?search:loc.search->handle, &loc, "rb");
@@ -4845,7 +4846,7 @@ vfsfile_t *CL_OpenFileInPackage(searchpathfuncs_t *search, char *name)
 					if (search)
 						found = search->FindFile(search, &loc, name, NULL);
 					else
-						found = FS_FLocateFile(name, FSLF_IFFOUND, &loc); 
+						found = FS_FLocateFile(name, FSLF_IFFOUND, &loc);
 					if (found)
 					{
 						f = (search?search:loc.search->handle)->OpenVFS(search?search:loc.search->handle, &loc, "rb");
@@ -4942,7 +4943,7 @@ qboolean CL_ListFilesInPackage(searchpathfuncs_t *search, char *name, int (QDECL
 				if (search)
 					found = search->FindFile(search, &loc, name, NULL);
 				else
-					found = FS_FLocateFile(name, FSLF_IFFOUND, &loc); 
+					found = FS_FLocateFile(name, FSLF_IFFOUND, &loc);
 				if (found)
 				{
 					f = (search?search:loc.search->handle)->OpenVFS(search?search:loc.search->handle, &loc, "rb");
@@ -5227,7 +5228,7 @@ static void FS_ReloadPackFilesFlags(unsigned int reloadflags)
 		if (dir && (fs_manifest->gamepath[i].flags&GAMEDIR_BASEGAME))
 		{
 			//paths should be validated before here, when parsing the manifest.
-			
+
 #ifdef NQPROT
 			//vanilla NQ uses a slightly different protocol when started with -rogue or -hipnotic (and by extension -quoth).
 			//QW+FTE protocols don't care so we can get away with being a little loose here
@@ -5616,7 +5617,7 @@ static qboolean Sys_SteamHasFile(char *basepath, int basepathlen, char *steamdir
 	FILE *f;
 	DWORD resultlen;
 	HKEY key = NULL;
-	
+
 	if (RegOpenKeyExW(HKEY_CURRENT_USER, L"SOFTWARE\\Valve\\Steam", 0, STANDARD_RIGHTS_READ|KEY_QUERY_VALUE, &key) == ERROR_SUCCESS)
 	{
 		wchar_t suckysucksuck[MAX_OSPATH];
@@ -5635,14 +5636,14 @@ static qboolean Sys_SteamHasFile(char *basepath, int basepathlen, char *steamdir
 }
 
 #ifdef HAVE_CLIENT
-static INT CALLBACK StupidBrowseCallbackProc(HWND hwnd, UINT uMsg, LPARAM lp, LPARAM pData) 
+static INT CALLBACK StupidBrowseCallbackProc(HWND hwnd, UINT uMsg, LPARAM lp, LPARAM pData)
 {	//'stolen' from microsoft's knowledge base.
 	//required to work around microsoft being annoying.
 	wchar_t szDir[MAX_PATH];
 	wchar_t *foo;
-	switch(uMsg) 
+	switch(uMsg)
 	{
-	case BFFM_INITIALIZED: 
+	case BFFM_INITIALIZED:
 		if (GetCurrentDirectoryW(sizeof(szDir)/sizeof(TCHAR), szDir))
 		{
 //			foo = strrchr(szDir, '\\');
@@ -5656,7 +5657,7 @@ static INT CALLBACK StupidBrowseCallbackProc(HWND hwnd, UINT uMsg, LPARAM lp, LP
 		break;
 	case BFFM_VALIDATEFAILEDW:
 		break;	//FIXME: validate that the gamedir contains what its meant to
-	case BFFM_SELCHANGED: 
+	case BFFM_SELCHANGED:
 		if (SHGetPathFromIDListW((LPITEMIDLIST) lp, szDir))
 		{
 			wchar_t statustxt[MAX_OSPATH];
@@ -7115,7 +7116,7 @@ static int QDECL FS_EnumeratedFMF(const char *fname, qofs_t fsize, time_t mtime,
 {
 	ftemanifest_t *man = NULL;
 	fmfenums_t *e = inf;
-	vfsfile_t *f = NULL;		
+	vfsfile_t *f = NULL;
 	if (spath)
 	{
 		flocation_t loc;
